[1mdiff --git a/examples/follow_with_continuity.py b/examples/follow_with_continuity.py[m
[1mindex e69de29..562d805 100644[m
[1m--- a/examples/follow_with_continuity.py[m
[1m+++ b/examples/follow_with_continuity.py[m
[36m@@ -0,0 +1,34 @@[m
[32m+[m[32mimport gbvision as gbv[m
[32m+[m[32mfrom gbvision.continuity.continues_circle import ContinuesCircle[m
[32m+[m
[32m+[m[32mFUEL = gbv.GameObject(0.04523893421169302263386206471922)[m
[32m+[m
[32m+[m[32mFUEL_THRESHOLD = gbv.Threshold([[0, 72], [126, 206], [140, 220]], 'HSV')[m
[32m+[m
[32m+[m
[32m+[m[32mdef main():[m
[32m+[m[32m    camera = gbv.USBCamera(0, gbv.LIFECAM_3000)[m
[32m+[m[32m    find_fuel = gbv.CircleFinder(FUEL_THRESHOLD, FUEL)[m
[32m+[m[32m    ok, frame = camera.read()[m
[32m+[m[32m    all_fuels = find_fuel.get_circles(frame)[m
[32m+[m[32m    print(all_fuels)[m
[32m+[m[32m    nearest_fuel = None[m
[32m+[m[32m    fuel_follower = None[m
[32m+[m[32m    if len(all_fuels) > 0:[m
[32m+[m[32m        nearest_fuel = all_fuels[0][m
[32m+[m[32m        print(nearest_fuel[1])[m
[32m+[m[32m        fuel_follower = ContinuesCircle(shape=nearest_fuel, frame=frame)[m
[32m+[m[32m    found_fuel = False[m
[32m+[m[32m    while True:[m
[32m+[m[32m        frame = camera.read()[m
[32m+[m[32m        all_fuels = find_fuel.get_circles(frame)[m
[32m+[m[32m        if nearest_fuel is None and len(all_fuels) > 0:[m
[32m+[m[32m            nearest_fuel = all_fuels[0][m
[32m+[m[32m            fuel_follower = ContinuesCircle(shape=nearest_fuel, frame=frame)[m
[32m+[m[32m            found_fuel = True[m
[32m+[m[32m        if found_fuel:[m
[32m+[m[32m            fuel_follower.update()[m
[32m+[m[32m        print(fuel_follower.get())[m
[32m+[m
[32m+[m[32mif __name__ == '__main__':[m
[32m+[m[32m    main()[m
[1mdiff --git a/examples/median_threshold.py b/examples/median_threshold.py[m
[1mindex 486084b..c3a5402 100644[m
[1m--- a/examples/median_threshold.py[m
[1m+++ b/examples/median_threshold.py[m
[36m@@ -8,7 +8,7 @@[m [mstdv = np.array([40, 40, 40])[m
 [m
 def main():[m
     camera = gbv.USBCamera(0)[m
[31m-    camera.set_exposure(-8)[m
[32m+[m[32m    camera.set_exposure(-4)[m
     cv2.namedWindow('window', cv2.WINDOW_FREERATIO)[m
     ok, frame = camera.read()[m
     while ok:[m
[1mdiff --git a/gbvision/continuity/continues_circle.py b/gbvision/continuity/continues_circle.py[m
[1mindex d76f9c4..5fec414 100644[m
[1m--- a/gbvision/continuity/continues_circle.py[m
[1m+++ b/gbvision/continuity/continues_circle.py[m
[36m@@ -1,7 +1,7 @@[m
 import math[m
 [m
 from gbvision.models.shapes import circle_collision[m
[31m-from gbvision.constants.types import Rect, Number, Circle, Point[m
[32m+[m[32mfrom gbvision.constants.types import Rect, Number, Circle, Point, Frame[m
 from gbvision.continuity.continues_shape import ContinuesShape[m
 [m
 [m
[1mdiff --git a/gbvision/continuity/continues_shape.py b/gbvision/continuity/continues_shape.py[m
[1mindex e3dd5bc..eefd830 100644[m
[1m--- a/gbvision/continuity/continues_shape.py[m
[1m+++ b/gbvision/continuity/continues_shape.py[m
[36m@@ -16,9 +16,9 @@[m [mclass ContinuesShape(abc.ABC):[m
 [m
     @abc.abstractmethod[m
     def _shape_collision(self, shape) -> bool:[m
[31m-        """[m
[31m-        """[m
[32m+[m[32m        '''[m
 [m
[32m+[m[32m        '''[m
     @staticmethod[m
     @abc.abstractmethod[m
     def _shape_area(shape) -> Number:[m
[1mdiff --git a/gbvision/finders/circle_finder.py b/gbvision/finders/circle_finder.py[m
[1mindex 35d4862..c4ee3db 100644[m
[1m--- a/gbvision/finders/circle_finder.py[m
[1m+++ b/gbvision/finders/circle_finder.py[m
[36m@@ -1,3 +1,7 @@[m
[32m+[m[32mfrom typing import List[m
[32m+[m
[32m+[m[32mfrom gbvision.constants.types import Circle[m
[32m+[m
 from gbvision.constants.math import SQRT_PI[m
 from gbvision.constants.system import EMPTY_PIPELINE[m
 from gbvision.models.contours import find_contours, FilterContours, contours_to_circles_sorted[m
[36m@@ -28,6 +32,6 @@[m [mclass CircleFinder(ObjectFinder):[m
         return list([m
             map(lambda circ: self.game_object.location_by_params(camera, SQRT_PI * circ[1], circ[0]), circles))[m
 [m
[31m-    def get_circles(self, frame):[m
[32m+[m[32m    def get_circles(self, frame) -> List[Circle]:[m
         return self._full_pipeline(frame)[m
 [m
